doctype html
html
  head
    title= title
    block stylesheets
      link(rel='stylesheet', href='/stylesheets/style.css')
  body
    .menu
      h1= title

    div(style='display: flex; justify-content: space-between; flex-wrap: wrap;')
      div
      div(style='text-align: center; width: 100px;')
        label.switch
          if p=='10' || p=='11'
            input(type="checkbox" checked onclick="flip_Hash();")
          else 
            input(type="checkbox" onclick="flip_Hash();")
          span.slider.round
        div Hashing
      div(style='text-align: center; width: 100px;')
        label.switch
          if p=='01' || p=='11'
            input(type="checkbox" checked onclick="flip_SQLI();")
          else 
            input(type="checkbox" onclick="flip_SQLI();")
          span.slider.round
        div SQL Protect
      div(style='text-align: center; width: 100px;')
        label.switch
          input(type="checkbox" onclick="alert(SQLI);")
          span.slider.round
        div XSS Protect
      div
    
    p Now logged in you can see the data. To return, #[a(href='/login/out') Log Out]
    if p=='00' || p=='10'
      p If protections against SQL Injection are off, we can inject additional code to force additional behaviour. If you click next/previous page you can see the #[strong i] parameter changes signifying it as an iterator of data. If this is assumed as part of a LIMIT statement in the SQL query then it is likely at the end then we know we can inject a union with the Users table there - retrieving data from that table instead. Therefore with SQLI off, try entering the following into the #[strong i] parameter in the URL.
      p 0) UNION ALL (SELECT user AS title, '' AS Director, pass AS TopTwoActors, '' AS releaseDate, '' AS movieId FROM Users LIMIT 0
      if p=='00'
        p Without hashing the data we can see the raw data from Users meaning we can log in as any one of them.
      else 
        p With the data hashed, users have their raw data protected. However, we can still use this information to match the hash values of usernames and passwords. By plugging in different potential usernames and common passwords, we can brute force search for input required to reap those hash values, which we know collectively belong to one user.
    else
      p If Protection is on then SQL Injection will not work. We run a detection algorithm for any SQL keywords and if the user is potentially attempting to do injection so we stop them and return the default page instead. To use SQL Injection, turn the button off and click #[button(type='submit' onclick='window.location.href="/data"+getQueries();') here].

    if ACCEPT
      if searchQuery=='%'
        #[input(type="text" id="search" placeholder='search keywords')] #[button(type="submit" onclick="link(0,"+genreShown+");") Search]
      else
        #[input(type="text" id="search" value=searchQuery)] #[button(type="submit" onclick="link(0,"+genreShown+");") Search]
      #[input(type="hidden" id="item", value=itemNum)] #[button(type="submit" onclick="link(-30,"+genreShown+");") Previous Page]
      #[input(type="hidden" id="item", value=itemNum)] #[button(type="submit" onclick="link(30,"+genreShown+");") Next Page]
      
      .button_bar
        .dropdown
          if genreShown != 0
            .dropdown-header(onclick='toggleDropdown(this)') #{genres[genreShown-1].name}
          else 
            .dropdown-header(onclick='toggleDropdown(this)') Choose Genre
          .dropdown-content
            #[input(type="hidden" id="gId", value=0)] #[button(type="submit" onclick="link(0,0);") All Genres]
            each genre in genres
              #[input(type="hidden" id="gId", value=genre.genreId)] #[button(type="submit" onclick="link(0,"+genre.genreId+");") #{genre.name}]

      table
        thead
          tr
            each title in allCols
              if title != 'movieId'
                th= title
        tbody
          each row in data
            tr
              each title in allCols
                if title != 'movieId'
                  if title == 'TopTwoActors'
                    td #{row.TopTwoActors.slice(1,row.TopTwoActors.length-1).split(', ').map(actor => actor.slice(1,actor.length-1))}
                  else if title == 'rating'
                    td #{parseFloat(row.rating).toPrecision(3)}
                  else
                    td= row[title]

      #[input(type="hidden" id="item", value=itemNum)] #[button(type="submit" onclick="link(-30,"+genreShown+");") Previous Page]
      #[input(type="hidden" id="item", value=itemNum)] #[button(type="submit" onclick="link(30,"+genreShown+");") Next Page]

    script.
      var SQLI;
      window.onload = function() {
        Hash = parseInt(#{p.charAt(0)});
        SQLI = parseInt(#{p.charAt(1)});
        refreshProtections();
        var ACCEPT = #{ACCEPT};
        if (!ACCEPT) {
          window.location.href = '/login';
        }
      };

      function link(plusItem, gId) {
        var search = document.getElementById("search").value || '%';
        var item = 0;
        if (plusItem != 0) {
          item = parseInt(document.getElementById('item').value || '0') + parseInt(plusItem);
        }
        window.location.href = '/data'+getQueries()+'&s='+search+'&i='+item+'&g='+gId;
      }

      function flip_Hash() {
        Hash = 1-Hash;
        refreshProtections();
      }
      function flip_SQLI() {
        SQLI = 1-SQLI;
        refreshProtections();
      }

      function refreshProtections() {
        document.cookie = 'Hash=' + Hash +'SQLI=' + SQLI + ';path=/;';
      }
      function getQueries() {
        return '?p='+Hash.toString() + SQLI.toString();
      }
