doctype html
html
  head
    title= title
    block stylesheets
      link(rel='stylesheet', href='/stylesheets/style.css')
      script(src="https://cdnjs.cloudflare.com/ajax/libs/crypto-js/4.1.1/crypto-js.min.js")

  body
    .menu
      h1= title
    
    div(style='display: flex; justify-content: space-between; flex-wrap: wrap;')
      div
      div(style='text-align: center; width: 100px;')
        label.switch
          if p=='10' || p=='11'
            input(type="checkbox" checked onclick="flip_Hash();")
          else 
            input(type="checkbox" onclick="flip_Hash();")
          span.slider.round
        div Hashing
      div(style='text-align: center; width: 100px;')
        label.switch
          if p=='01' || p=='11'
            input(type="checkbox" checked onclick="flip_SQLI();")
          else 
            input(type="checkbox" onclick="flip_SQLI();")
          span.slider.round
        div SQL Protect
      div(style='text-align: center; width: 100px;')
        label.switch
          input(type="checkbox" onclick="alert(SQLI);")
          span.slider.round
        div XSS Protect
      div

    if !ACCEPT
      p Before viewing the data, please log in:
      p: #[input(type="text" id="username")] #[input(type="text" id="password")] #[input(type="submit" onclick="encryptData();")]
    if p=='00' || p=='10'
      p With protections against SQL Injection off, we can inject additional code to force additional behaviour. After some trial and error around key names and strucutre, we could guess the table columns #[strong user] and #[strong pass]. With this we can inject an OR into the SQL with clever use of quotation marks to force an additional condition into the query that allows us to pass through if there are #[i any] users with that password. Therefore, try entering the following.
      p username: user' OR pass='p1 // password: p1
    else
      p If Protection is on then SQL Injection will not work. We run a detection algorithm for any SQL keywords and if the user is potentially attempting to do injection so we stop them and return the default page instead. To use SQL Injection, turn the button off and click #[button(type='submit' onclick='window.location.href="/login"+getQueries();') here].

    script.
      var SQLI;
      window.onload = function() {
        Hash = parseInt(#{p.charAt(0)});
        SQLI = parseInt(#{p.charAt(1)});
        refreshProtections();
        var ACCEPT = #{ACCEPT};
        if (ACCEPT) {
          window.location.href = '/data'+getQueries();
        }
        if (!window.location.href.includes('login?') && !window.location.href.endsWith('login') && !ACCEPT) {
          window.location.href = '/login'+getQueries();
        }
      };

      function encryptData() {
        var username = hash(document.getElementById("username").value);
        var password = hash(document.getElementById("password").value);
        window.location.href = '/login/'+username+'/'+password+getQueries();
      }

      function hash(plaintext) {
        if (Hash) {
          return CryptoJS.SHA256(plaintext).toString();
        } else {
          return plaintext;
        }
      }

      function flip_Hash() {
        Hash = 1-Hash;
        refreshProtections();
      }
      function flip_SQLI() {
        SQLI = 1-SQLI;
        refreshProtections();
      }

      function refreshProtections() {
        document.cookie = 'Hash=' + Hash +'SQLI=' + SQLI + ';path=/;';
      }
      function getQueries() {
        return '?p='+Hash.toString() + SQLI.toString();
      }
        