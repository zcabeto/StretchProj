doctype html
html
  head
    title= title
    block stylesheets
      link(rel='stylesheet', href='/stylesheets/style.css')
    script(src='https://cdn.jsdelivr.net/npm/chart.js')
  body
    .menu
      h1= title
      .menu-content
        p: #[a(href='/') Home] #[a(href='/films') Films] #[a(href='/genres') Genres] #[a(href='/predict') Predict]

    p Here, you can view all the genres in our database. Click on any genre for more detailed information. You can also click the genres in the legend of the graph to compare rating distributions.

    table
      thead
        tr
          th Id 
          th Genre
          th Average Rating
      tbody
        each genre in genres
          tr(class='row-link', data-url=`/films`)
            td= genre.genreId
            td= genre.name
            td= genre.average_rating
    
    canvas#genresChart(width='600', height='200',style="margin-left:30px; margin-right: 70px;")

    
    script.
      genreNamesJSON = '#{JSON.stringify(genreNames)}';
      genreNames = genreNamesJSON.slice(7,genreNamesJSON.length-7).split('&quot;,&quot;');
      genreRatings = '#{genreRatings}'.split(',X,').map(arr => arr.split(','));
      let dataset = [];
      for (var i=0; i<genreRatings.length; i++) {
        dataset.push({
          label: genreNames[i],
          data: genreRatings[i],
          borderWidth: 1,
          hidden: true
        });
      }
      
      const ctx = document.getElementById('genresChart');

      new Chart(ctx, {
        type: 'bar',
        data: {
          labels: ['0.5', '1.0', '1.5', '2.0', '2.5', '3.0', '3.5', '4.0', '4.5', '5.0'],
          datasets: dataset
        },
        options: {
          scales: {
            y: {
              title: { text:'Frequency', display: true },
              beginAtZero: true
            },
            x: {
              title: { text: 'Rating ?/5', display: true}
            }
          },
          plugins: {
            legend: {
              onClick: (click, legendItem, legend) => {
                const index = genreNames.indexOf(legendItem.text);
                legend.chart.data.datasets[index].hidden = !legend.chart.data.datasets[index].hidden;
                legend.chart.update();
              },
              labels: {
                generateLabels: (chart) => {
                  let visibility = [];
                  for (var i=0; i<chart.data.datasets.length; i++) {
                    if (chart.data.datasets[i].hidden) {
                      visibility.push('rgba(100,100,100,0.5)');
                    } else {
                      visibility.push('rgba(100,100,100,1)');
                    }
                  };
                  return chart.data.datasets.map(
                    (data, index) => ({
                      text: data.label,
                      fillStyle: data.backgroundColor,
                      strokeStyle: data.backgroundColor,
                      fontColor: visibility[index]
                    })
                  )
                }
              }
            }
          }
        }
      });

    script.
      document.addEventListener('DOMContentLoaded', function() {
        document.querySelectorAll('.row-link').forEach(function(element) {
          element.addEventListener('click', function() {
            const url = this.dataset.url;
            window.location.href = url;
          });
        });
      });